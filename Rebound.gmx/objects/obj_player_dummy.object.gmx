<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_dummy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate our hero!
grav_force = .5;
horizontal_speed = 0;
vertical_speed = 0
jump_speed = 12;
pressure = 0;
pressure_level = 0;
jumpsUsed = 0;
maxJumps = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check and update Sarah each frame
scr_playerStepSnippet();
yslope = 0;

//Check if Sarah's on the ground
if(place_meeting(x, y+1, obj_wall_dummy))
{
    vertical_speed = 0;
    
    //Used for Double-Jumping
    //jumpsUsed = 0;
       
    //Jump, gypsy! Press A!
    if(k_jump == 1)
    {
    vertical_speed -= jump_speed;
    //Used for Double-Jumping
    //jumpsUsed++;
    } 
}
else
{
    //Jump, gypsy! Press A! (Double-Jump in the air)
    /*
    if(jumpsUsed &lt; 1)
    {
        jumpsUsed = 1;
    }
    if(k_jump == 1 &amp;&amp; jumpsUsed &lt; maxJumps)
    {
    vertical_speed = min(-jump_speed, max(-jump_speed, vertical_speed-jump_speed));
    jumpsUsed++;
    } 
    */
    
    //Free-faaaaaalling ~ (Gravity's doing it's thing)
    if(vertical_speed &lt; 10)
    {
        if(vertical_speed &lt; 0)
        {
            vertical_speed += grav_force;
        }
        else
        {
            vertical_speed += grav_force * (1 - (pressure_level * .16));
        }
    }
}

//Move to the right or left
if(obj_GlobalJoystick.direction_x &gt; 0)
{
    horizontal_speed = 5;
}
else if(obj_GlobalJoystick.direction_x &lt; 0)
{
    horizontal_speed = -5;
}
else
{
    horizontal_speed = 0;
}

//Sarah, watch out for that wall! (Horizontal collisions)
if(place_meeting(x+horizontal_speed, y, obj_wall_dummy))
{
    yslope = 0;
    while(place_meeting(x+horizontal_speed, y-yslope, obj_wall_dummy)  &amp;&amp; yslope &lt;= abs(1*horizontal_speed)) 
    {
        yslope += 1;
    }
    if(place_meeting(x+horizontal_speed, y-yslope, obj_wall_dummy))
    {
        while(!place_meeting(x+sign(horizontal_speed), y, obj_wall_dummy))
        {
          x+= sign(horizontal_speed);
        }
        horizontal_speed = 0;
    }
    else
    {
        y-=yslope;
    }
    
}

var x_modifier = 1;

if(pressure_level &gt;2)
{
 x_modifier = (1 - (pressure_level * .16));
}

//Show me ya moves, Sarah! (Make appropriate vertical movements)
if(place_meeting(x, y+1, obj_wall_dummy))
{
x+= (horizontal_speed * x_modifier);
}
else if(place_meeting(x, y+(abs(1.5*horizontal_speed)), obj_wall_dummy) || place_meeting(x, y-(abs(1.5*horizontal_speed)), obj_wall_dummy))
{
x+= (horizontal_speed * x_modifier);
}
else
{
x += horizontal_speed;
}

//Sarah, watch out for that wall! (vertical collisions)
if(place_meeting(x, y + vertical_speed, obj_wall_dummy))
{
    while(!place_meeting(x, y+sign(vertical_speed), obj_wall_dummy))
    {
        y+= sign(vertical_speed);
    }
    vertical_speed = 0;
}
//H'YES! (Make appropriate vertical movements)
y += vertical_speed;

//Now to INFLATE! Increase pressure to next level based on special key press!
if(k_special_pressed ==1)
{
    //Only change up to the maximum level. Otherwise, deflate!
    if(pressure &lt; 50)
    {
        pressure += 10;
    }
    else
    {
        pressure = 0;
    }

if(pressure_level &lt; 5)
{
    pressure_level = pressure/10;
}
else
{
    pressure_level = 0
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall_dummy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision: Don't let Sarah through!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw our hero based on pressure!
if(pressure_level == 1)
{
draw_sprite(spr_player_pressure1, 0, x, y);
}
else if(pressure_level == 2)
{
draw_sprite(spr_player_pressure2, 0, x, y);
}
else if(pressure_level == 3)
{
draw_sprite(spr_player_pressure3, 0, x, y);
}
else if(pressure_level == 4)
{
draw_sprite(spr_player_pressure4, 0, x, y);
}
else if(pressure_level == 5)
{
draw_sprite(spr_player_pressure5, 0, x, y);
}
else
{
draw_sprite(spr_player_dummy, 0, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
