<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar d_Left,d_Right,d_Up,d_Down,d_DownLeft,d_DownRight,d_UpLeft,d_UpRight;

d_Left=1
d_Right=2
d_Up=3
d_Down=4
d_DownLeft=5
d_DownRight=6
d_UpLeft=7
d_UpRight=8



if !instance_exists(obj_GlobalJoystick)
{
instance_create(0,0,obj_GlobalJoystick)
}

lad=-1

globalvar k_dash,k_shoot,k_jump,k_special;

k_dash      =0
k_shoot     =0
k_jump      =0
k_special   =0

new_player    =0
new_controller=0

k_dash    = 82      //Right Shoulder on XBOX 360 Gamepad
k_shoot   = ord('S')
k_jump    = ord('T')
k_special = 76      //Left Shoulder on XBOX 360 Gamepad

//display_set_gui_size(320, 240); // This is the default size of your Window for GUI Purposes.
//display_set_gui_maximise(); //use this to alter the draw size to bring the joyStick bakc into the drawn window

//This button layout matches the X, Y, LShoulder, RShoulder of an XBOX 360 gamepad over USB OTG Cable on Android 3.2+ devices.
//If you are testing on an Xperia Play device you can replace 82 and 76 with vk_backspace and vk_space


//Simple Cardinal direction D-Pad, to add 8 dorections, duplicate the style bellow this.
                               // window_get_width()-96,window_get_height()-32
                               //The alignment is now off it appears
bbutton3    =   virtual_key_add(window_get_width()-80,window_get_height()-80,28,28,k_dash);
bbutton6    =   virtual_key_add(window_get_width()-32,window_get_height()-58,32,36,k_dash);
bbutton9    =   virtual_key_add(window_get_width()-28,window_get_height()-28,28,28,k_dash);

xbutton1    =   virtual_key_add(window_get_width()-78,window_get_height()-80,28,28,k_shoot);
xbutton4    =   virtual_key_add(window_get_width()-80,window_get_height()-58,32,36,k_shoot);
xbutton7    =   virtual_key_add(240,212,28,28,k_shoot);

abutton7    =   virtual_key_add(242,212,28,28,k_jump);
abutton8    =   virtual_key_add(262,208,36,32,k_jump);
abutton9    =   virtual_key_add(292,212,28,28,k_jump);

ybutton1    =   virtual_key_add(242,160,28,28,k_special);
ybutton2    =   virtual_key_add(262,160,36,32,k_special);
ybutton3    =   virtual_key_add(292,160,28,28,k_special);


// 8 touch points, with each corner having overlapping copies so that pressing in a diagonal to hit two buttons activates them both, allowing the closest feasable digital controls.
// Layout follows           1   2   3
//                          4       6
//                          7   8   9

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(k_jump)==1 draw_sprite(sp_a_button,0,window_get_width()-64,window_get_height()-64)
else draw_sprite(sp_a_button,1,window_get_width()-64,window_get_height()-64)

if keyboard_check(k_special)==1 draw_sprite(sp_y_button,0,window_get_width()-96,window_get_height()-96)
else draw_sprite(sp_y_button,1,window_get_width()-96,window_get_height()-96)
        
if keyboard_check(k_dash)==1 draw_sprite(sp_b_button,0,window_get_width()-96,window_get_height()-32)
else draw_sprite(sp_b_button,1,window_get_width()-96,window_get_height()-32)
        
if keyboard_check(k_shoot)==1 draw_sprite(sp_x_button,0,window_get_width()-128,window_get_height()-64)
else draw_sprite(sp_x_button,1,window_get_width()-128,window_get_height()-64)





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
